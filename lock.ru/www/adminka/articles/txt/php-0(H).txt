<b class=date>[ <b class=porr>0</b> ] { <b class=por>Предисловие</b> }</b>
<b class=date>[ <b class=porr>1</b> ] { <b class=por>Ведение</b> }</b>
<b class=date>[ <b class=porr>2</b> ] { <b class=por>Первые шаги</b> }</b>
<b class=date>[ <b class=porr>3</b> ] { <b class=por>Заключение</b> }</b>


<b class=date>[ <b class=porr>0</b> ] { <b class=por>Предисловие</b> }</b>
С этой статьи я решаю начать цикл статей той же направленности, а именно помощи новичкам в освоении PHP.
Это связано с тем, что ко мне обращаются люди, за помощью в исправлении каких либо проблем в их скриптах.
Зачастую в процессе общения с ними (конечно не со всеми) понимаешь, что им не хватает простых основ, которые должен знать каждый уважающий себя кодер на php.
Именно поэтому мной было принято решении написать цикл статей, которые помогут новичкам освоиться в мире кодинга на php.
Постараюсь мысленно вернуться в прошлое, во время, когда я начинал изучать php, и ответить на все свои вопросы.
Не судите строго, за написанные ниже текст, он может показаться вам слишком простым. Но собственно для кого-то может он и простой, а для новичков как раз самое то.

<b class=date>[ <b class=porr>1</b> ] { <b class=por>Ведение</b> }</b>
Что же такое это PHP?
Описание :
    "PHP: Hypertext Preprocessor" - это широко используемый язык программирования общего назначения с открытым исходным кодом.
    PHP сконструирован специально для ведения Web-разработок и может внедряться в HTML-код. #Взято из мануала
Надеюсь вы знаете язык разметки HTML. Ибо без знаний HTML вам придется туго в дальнейшем.

Что же может PHP?
    PHP может все.
    Главным образом, область применения PHP сфокусирована на написание скриптов, работающих на стороне сервера; таким образом, PHP способен выполнять всё то, что выполняет любая другая программа CGI, например, обрабатывать данные форм, генерировать динамические страницы или отсылать и принимать cookies.
    Но PHP способен выполнять и множество других задач. #Взято из мануала

<b class=date>[ <b class=porr>2</b> ] { <b class=por>Первые шаги</b> }</b>
Файлы скриптов написанных на php должны иметь расширение *.php, *.phtml дабы успешно выполняться на сервере.
Как во всех языках программирования важно понять самые азы, и полностью разобраться с поступившими знаниями.
Для того, что бы PHP-парсер приступил к выполнению вашего скрипта, ему нужно обозначить данные которые он будет обрабатывать.
Делается это следующим образом:
<code><font color="#0000BB">&lt;?

?&gt;</font></code>
Именно <code><font color="#0000BB">&lt;? тут ?&gt;</font></code> будет находиться ваш программный код.
Вариаций для таких обозначений несколько :
<code><font color="#0000BB">&lt;?php

?&gt;</font></code>
или
<code><font color="#0000BB">&lt;script language="php"&gt;

&lt;/script&gt;</font></code>
или
<code><font color="#0000BB">&lt;%

%&gt;</font></code>
Возможность использовать то или иное описание зависит от конфигурации PHP.
Мы же будем использовать для своих скриптов только такое : <code><font color="#0000BB">&lt;?php ?&gt;</font></code> обозначению

Приступим же к написанию нашего первого скрипта:
<code><font color="#0000BB">&lt;?php
</font><font color="#007700">print </font><font color="#DD0000">"Это мой первый скрипт"</font><font color="#007700">;
</font><font color="#0000BB">?&gt;</font></code>
При выполнении этого скрипта на экране появится надпись "Это мой первый скрипт", только без кавычек.
Теперь рассмотрим что же это за команда такая print.
    Единственная функция этой команды, это вывод на экран данных.
    Существует несколько вариантов исполнения. Следующие записи аналогичны, и результат их работы будет одинаков:
          <code>print "Text";
          print ("Text" );
          print 'Text';
          print ( 'Text' );
          </code>
Так же в php есть и аналог этой функции, который выполняет тоже самое, а называется эта функция echo. Т.е. так же данные можно выводить и с помощью <code>echo</code>.
Обращаю ваше внимание на то, что после каждой команды ( далее оператора ) обязательно должен стоять знак завершения работы оператора : ";" ( точка с запятой ) :))
Иначе просто на этапе компиляции интерпретатор выдаст ошибку, о неправильно написанном коде.

Давайте теперь научимся работать с переменными.
Следующий код покажет вам, как обозначаются переменные :
<code><font color="#0000BB">&lt;?php
$text </font><font color="#007700">= </font><font color="#DD0000">"Привет"</font><font color="#007700">;
print </font><font color="#0000BB">$text</font><font color="#007700">;
</font><font color="#0000BB">?&gt;</font></code>
Как видите, у нас появилась новая строчка : <code>$text = "Привет"</code>;
Переменные в php начинаются со знака доллара "$", где после знака следует имя переменной.
В нашем примере переменной <code>$text</code> будет присвоено значение "Привет".
А вот теперь для вас новое : print <code>$text</code>; Как видите существует возможность вывода на экран данных, которые содержат в себе переменные.
Результатом выполнения данного скрипта будет слово "Привет" на страничке.

Надеюсь это усвоено.
Теперь давайте приступим к операциям с переменными.
<code><font color="#0000BB">&lt;?php
$a </font><font color="#007700">= </font><font color="#0000BB">1</font><font color="#007700">;
</font><font color="#0000BB">$b </font><font color="#007700">= </font><font color="#0000BB">2</font><font color="#007700">;
</font><font color="#0000BB">$c </font><font color="#007700">= </font><font color="#0000BB">3</font><font color="#007700">;

</font><font color="#0000BB">$d </font><font color="#007700">= </font><font color="#0000BB">$a </font><font color="#007700">+ </font><font color="#0000BB">$b </font><font color="#007700">+ </font><font color="#0000BB">$c</font><font color="#007700">;

print </font><font color="#0000BB">$d</font><font color="#007700">;

</font><font color="#0000BB">?&gt;</font></code>
Как видите у нас есть три переменных (<code>$a, $b, $c</code>), которые содержат в себе числа, и четвертая переменная ( <code>$d</code> ), которая содержит в себе результат произведенных операций, а именно сумму чисел расположенных в первых трех переменных.
Так же print $d; выведет на экран число 6. Заметьте, что интерпретатору не важно, какие данные ему дали, чтобы вывести на экран. Будь то строка или число, результат будет одинаковым.
Единственная разница, что при выводе числа, интерпретатору придется сначала преобразовать число в строку.
Следующим блоком будет описание комментариев в языке php
<code><font color="#0000BB">&lt;?php

</font><font color="#FF8000">// Это однострочный комментарий

# То же однострочный комментарий

/* А вот это уже
   многострочный комментарий
*/

</font><font color="#0000BB">?&gt;</font></code>
Все данные, которые находятся в комментариях не воспринимаются интерпретатором, а используются лишь для описания производимых действий.
Поработаем теперь немного со строками.
<code><font color="#0000BB">&lt;?php
$first_half </font><font color="#007700">= </font><font color="#DD0000">"Я изучаю "</font><font color="#007700">;
</font><font color="#0000BB">$second_half </font><font color="#007700">= </font><font color="#DD0000">"php"</font><font color="#007700">;

</font><font color="#0000BB">$r1 </font><font color="#007700">= </font><font color="#0000BB">$first_half </font><font color="#007700">. </font><font color="#0000BB">$second_half</font><font color="#007700">;

</font><font color="#0000BB">$r2 </font><font color="#007700">= </font><font color="#0000BB">$first_half</font><font color="#007700">;
</font><font color="#0000BB">$r2 </font><font color="#007700">.= </font><font color="#0000BB">$second_half</font><font color="#007700">;

print </font><font color="#0000BB">$r1</font><font color="#007700">; </font><font color="#FF8000"># выведет "Я изучаю php"
</font><font color="#007700">print </font><font color="#0000BB">$r2</font><font color="#007700">; </font><font color="#FF8000"># выведет "Я изучаю php"
</font><font color="#0000BB">?&gt;</font></code>

Как видите из примера, у нас есть две переменные( <code>$first_half, $second_half</code> ) содержащие строковые данные ( "Я изучаю ", "php" ) соответственно.
Теперь рассмотрим операцию "склеивания" двух строк. <code>$r1 = $first_half . $second_half;</code>
Переменной $r1 будет присвоено значение двух "склеенных" строк. Операция присоединения ("склеивания") производится с помощью команды "."
Так же я привел второй пример, где в роли операции присоединения выступила команда ".="
Эта операция означает, что к переменной $r2 нужно присоединить переменную $second_half;
Обращаю ваше внимание на то, что до операции ".=" обязательно нужно описать переменную, к которой эта операция применяется.
Покажу на примере :
<code><font color="#0000BB">&lt;?php
$first_half </font><font color="#007700">= </font><font color="#DD0000">"Я изучаю "</font><font color="#007700">;
</font><font color="#0000BB">$second_half </font><font color="#007700">= </font><font color="#DD0000">"php"</font><font color="#007700">;

</font><font color="#0000BB">$r2 </font><font color="#007700">.= </font><font color="#0000BB">$second_half</font><font color="#007700">;
</font><font color="#0000BB">?&gt;</font></code>
Описанный код неправильно воспримется интерпретатором. Давай те взглянем на эту проблему со стороны памяти :))
<code>$first_half = "Я изучаю ";</code> - Этот код говорит препроцессору php выделить участок памяти под данные находящиеся в этой переменной. И возвращает адрес, по которому эти данные находятся в памяти.
А вот теперь наша проблемка с ".="
<code>$r2 .= $second_half;</code> - Как видно из кода выше этого участка мы не описывали переменную $r2 следовательно память под эту переменную нигде не выделена, и у нее нет адреса.
А что же мы делаем, мы пытаемся присоединить какие-то данные к несуществующему адресу в памяти, что естественно вызывает ошибку.
Исправить это положение очень просто. Нужно всего лишь до операции ".=" описать переменную $r2, к примеру так: $r2 = "";
Теперь у нас скрипт сработает нормально, и никаких ошибок он не выведет.

Так же вернувшись к примеру с суммированием трех переменных, напишу его в стиле ".=", только в качестве оператора присоединения у нас будет выступать оператор сложения.
<code><font color="#0000BB">&lt;?php
$a </font><font color="#007700">= </font><font color="#0000BB">1</font><font color="#007700">;
</font><font color="#0000BB">$b </font><font color="#007700">= </font><font color="#0000BB">2</font><font color="#007700">;
</font><font color="#0000BB">$c </font><font color="#007700">= </font><font color="#0000BB">3</font><font color="#007700">;

</font><font color="#0000BB">$d </font><font color="#007700">= </font><font color="#0000BB">0</font><font color="#007700">;
</font><font color="#0000BB">$d </font><font color="#007700">+= </font><font color="#0000BB">$a</font><font color="#007700">;
</font><font color="#0000BB">$d </font><font color="#007700">+= </font><font color="#0000BB">$b</font><font color="#007700">;
</font><font color="#0000BB">$d </font><font color="#007700">+= </font><font color="#0000BB">$c</font><font color="#007700">;

print </font><font color="#0000BB">$d</font><font color="#007700">;
</font><font color="#0000BB">?&gt;</font></code>
Результат тот же "6". Как видите все сделано по правилам: выделяем участок памяти под переменную <code>$d ("$d = 0")</code>, и дальше применяем операцию сложение "+=".

По себе знаю, что в дальнейшем вам ну никак не обойтись без условий выполнения того или иного кода.
Я помогу вам в этом разобраться.
<code><font color="#0000BB">&lt;?php
$a </font><font color="#007700">= </font><font color="#0000BB">55</font><font color="#007700">;

if ( </font><font color="#0000BB">$a </font><font color="#007700">== </font><font color="#0000BB">55 </font><font color="#007700">) {
   print </font><font color="#DD0000">"Пятьдесят пять"</font><font color="#007700">;
} else {
   print </font><font color="#0000BB">$a</font><font color="#007700">;
}

</font><font color="#0000BB">?&gt;</font></code>
После выполнения скрипта на экран выведется надпись "Пятьдесят пять".
Почему же это произошло? Все очень просто.
<code>if ( $a == 55 ) {
   print "Пятьдесят пять";
} else {
   print $a;
}</code>
Вся загвоздка для вас в этом наверное. А на самом деле все очень просто.
Перепишу этот код на словах :
   если переменная $a равна 55, то выполняем вывод надписи "Пятьдесят пять",
   иначе выполняем вывод информации, которая содержится в переменной $a
Как видите все просто.
Как это выглядит с точки зрения выполнения.
Если выполняется условие стоящее в скобках <code>( $a == 55 )</code>, то будем выполнять все операции стоящие после "{", пока не достигнем "}".
Ну а если условие не выполняется, то будем выполнять операции находящиеся в пространстве между "{" и "}" оператора else.
Дамс, сложновато наверное для начала. Но все равно, надеюсь вы поняли суть, которую я хотел донести до вас.
Замечу, что операция сравнения по значению выглядит так "==", а операция присвоения выглядит так "=". Как видите, разница совсем небольшая, поэтому тщательнее проверяйте условия, а то может возникнуть ситуация, когда вроде бы все правильно, а действия не выполняются.
Существует еще и операция сравнения по значению + по типу. Т.е. мы будем сравнивать имеют ли переменные одинаковые значения и относятся ли переменные к одному и тому же типу данных. Эта операция "===".
Приведу очень простой, но наглядный пример.
<code><font color="#0000BB">&lt;?php
$a </font><font color="#007700">= </font><font color="#DD0000">"123"</font><font color="#007700">;
</font><font color="#0000BB">$b </font><font color="#007700">= </font><font color="#0000BB">123</font><font color="#007700">;

if ( </font><font color="#0000BB">$a </font><font color="#007700">=== </font><font color="#0000BB">$b </font><font color="#007700">) {
   print </font><font color="#DD0000">"a равен b"</font><font color="#007700">;
} else {
   print </font><font color="#DD0000">"а не равен b"</font><font color="#007700">;
}

</font><font color="#0000BB">?&gt;</font></code>
Результатом выполнения скрипта будет надпись "а не равен b", так как переменная <code>$a = "123";</code> принадлежит к строковому типу данных, а переменная <code>$b = 123;</code> к целочисленному типу.
Если бы мы использовали операцию сравнения по значению ("=="), то на экране была бы надпись "a равен b";

<b class=date>[ <b class=porr>3</b> ] { <b class=por>Заключение</b> }</b>
Надеюсь в этой статье я ответил хотя бы на маленькую часть ваших вопросов.
Чем активнее вы будете задавать вопросы, тем больше ответов вы получите в следующих статьях.
Эта статья не претендует на полноту, ибо здесь описано лишь самое важное, что должен знать начинающий скрипто-писатель.

<b class=date>Конец.</b>