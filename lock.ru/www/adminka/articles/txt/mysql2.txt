Priv all;
В этой статье я расскажи и покажу простейшие примеры работы с MySQL.
Для новичков я предлагаю использовать простейший вариант: скачать с сайта www.danwer.ru последнюю версию базового комплекта(кстати, он на русском), и установить у себя на компе. В комплект входят все необходимые модули : php, mysql, perl, сервак Apache.
После установки запустите виртуальный сервер Apache.
Если все это сделано, то можем приступать...
Многим пользователям, как и мне, в начале обучения не хватает всего одного момента

<pre>
<?php
$mysql_host = "localhost";
$mysql_user = "root";
$mysql_pass = "";

mysql_connect ( $mysql_host, $mysql_user, $mysql_pass );
mysql_close ( );
?>
</pre>
Давайте теперь разберем этот код построчно:
<tt>$mysql_host = "localhost";</tt> - собственно все уже наверное знакомы с основами PHP, и объяснять, что в этих строках происходит присвоение данных переменным, никому не надо.
<tt>$mysql_user = "root";
$mysql_pass = "";
localhost</tt> - это сервер на котором запушенна база данных Mysql.
<tt>root</tt> - это имя пользователя для доступа к серверу баз данных.
Поле <tt>$mysql_pass = "";</tt> сознательно оставлено пустым, так как в денвере по стандартым настройкам пассворд на доступ к БД не стоит и можно обойтись без него.
<tt>mysql_connect ( $mysql_host, $mysql_user, $mysql_pass );</tt> В этой строке собственно происходит соединение с сервером <tt>localhost</tt> на котором расположена БД.
<tt>mysql_close ( );</tt> этой строчкой происходит закрытие активного соединения. В случае, если по каким либо причинам эту строку забыли добавть в скрипт, не произойдет ничего страшного. После выполнения скрипта закрытие соедиенения произойдет автоматически.
Для подключения можно было использовать только одну строчку, куда сразу можно было вписать все данные. Но у меня, да и не только у меня стиль программирования не такой простой.
Вот так бы выглядел кусок кода (2 строки):

<pre>
<?php
mysql_connect ( "localhost", "root", "" );
mysql_close ( );
?>
</pre>
А если немного расширить этот код, то можно будет узнавать успешно или неуспешно установили соединение.

<pre>
<?php
mysql_connect ( ... );
if ( !mysql_error ( ) ) {
   print "Соединение с сервером успешно установлено!";
} else {
   print "Не могу установить соединение с сервером!";
}
mysql_close ( );
?>
</pre>
Можно конечно и по другому:
<pre>
<?php
mysql_connect ( ... ) or die ( mysql_error ( ) );
mysql_close ( );
?>
</pre>
В случае неудачного коннекта скрипт выведет причину ошибки <tt>mysql_error ( )</tt> и завершит свою работу.
<tt>die</tt> эквивалентно <tt>exit</tt>. Т.е. при вызове выведется сообщение переданное в качестве аргумента, и скрипт прекратит свое выполнение.
После удачного коннекта к серверу есть возможность выполнять произвольные запросы к базе данных.
<pre>
mysql_query ( "текст запроса" );
</pre>
В качестве "текст запроса" может быть любой запрос в формате, который понимает MySQL.
Небольшой пример :
<pre>
$a = mysql_query ( "SHOW DATABASES" );
</pre>
После выполнения данного запроса переменной <tt>$a</tt> будет присвоен результат выполнения запроса, а именно информация о существующих базах данных.

Зная имя базы данных, есть возможность к ней законнектиться выполнив после  коннекта к серверу следующий код :
<tt>mysql_select_db ( "база" )</tt>
Теперь можно выполнять произвольные запросы уже на выбранной базе.

Обращаю ваше особое внимание на то, что если в запросе присутствует динамическая информация передаваемая скрипту, то обязательно нужно использовать <tt>mysql_escape_string ( $a )</tt> - для строк и <tt>intval ( $a )</tt> - для чисел. Все это нужно для того, что бы экранировать нежелательные для запроса данные.
Так как эти нежелательные данные могут нарушить запрос в случае чего вы получите уйму ошибок и лишние неприятности.
При выполнении запроса может вернуться несколько совпавших с хапросом строк таблицы. Количество таких строк можно узнать с помощью функции
<tt>mysql_num_rows ( $a )</tt>
Для того, что бы вывести все строки данных запроса воспользуемся следующим кодом :
<pre>
$a = mysql_query ( ... );
while ( $row = mysql_fetch_assoc ( $a ) ) :
       print $row["поле"];
endwhile;
</pre>
Где вместо <tt>$row["поле"]</tt>, т.е. вместо <tt>поле</tt> выступает имя поля таблицы.

Давайте теперь для примера выведем все таблицы которые есть в определенной базе.
<pre>
<?php
$mysql_host = "localhost";
$mysql_user = "root";
$mysql_pass = "";

mysql_connect ( $mysql_host, $mysql_user, $mysql_pass );
$a = mysql_query ( "SHOW TABLES IN `test`" );
if ( mysql_num_rows ( $a ) > 0 ) {
   print "Существующие таблицы:";
   while ( $c = mysql_fetch_array ( $a ) ) :
         print $c["0"];
   endwhile;
   mysql_close();
} else {
   mysql_close();
   print "Таблиц не существует! Соединение закрыто!";
}
?>
</pre>
Как видите все дело в перце, т.е. в запросе :)
Дальше я буду описывать только запросы, а их выполнением вы можете заняться сами.

<tt>CREATE DATABASE `other`</tt>
В результате выполнения данного запроса на сервере MySQL будет создана база данных <tt>test</tt>. Но создание произойдет только если у вас есть возможность создавать новые базы данных.

Да кстати и запросы в Mysql больше похожи просто на разговорную американскую речь. По этому если вы хоть немного знаете Английский, будет немного легче понять суть запросов.

<pre>
CREATE TABLE `addressbook` (
             `id` INT DEFAULT NULL AUTO_INCREMENT,
             `telefon` INT,
             `address` TEXT,
             `name` TEXT,
             UNIQUE (`id`)
)
</pre>
Давайте разберем тело запроса:
<tt>CREATE TABLE `addressbook`</tt> #комманда для создания новой таблицы, где "addressbook" имя таблицы.
<tt>`id` INT DEFAULT NULL AUTO_INCREMENT</tt> # В таблице будет присутствовать поле "id", которому автоматически будут присваиваться номера от 0 и до... INT - это указание типа данных которые будут в этом поле распологаться
<tt>UNIQUE (`id`)</tt> # Обозначив "id" как уникальный элемент, можно будет быть всегда уверенным, что в этом поле не будет одинаковых номеров.

Если вы изучали когда нибудь Паскаль или др. язык программирования в котором тоже приходилось обозначать к какому типу принадлежит переменная, то вам будет не сложно провести аналогию.
Собственно таблица не должна быть пустой. Спрашивается зачем же мы ее тогда создавали. Не хорошо.
На до бы ее чем нито наполнить.

<pre>
INSERT INTO `addressbook` VALUES(
``,
`582573`,
`Park Lenina 21-55`,
`Marina Larina`,
)
</pre>
Первое поле сознательно было оставлено пустым. Каждой записи(строке) в таблице значение поля "id" будет присвоено автоматически.
Вот таким кусочком кода мы легко добавим новую запись в нашу таблицу.
Если добавлять данные мы надеюсь уже научились, то пришел черед вывести их к нам на экран.
<tt>SELECT * FROM `addressbook`</tt>
В результате выполнения этого кода будет получен весь список записей таблицы(нашей телефонной книги).

Давайте я вам покажу какие еще можно добавить фишки к своему запросу:
<tt>SELECT `name`, `telefon` FROM `addressbook`</tt> #Из таблицы будут выбраны только поля "name" и "telefon".

<tt>SELECT * FROM `addressbook` WHERE `id` = 1</tt> #Будет выбрана запись, в которой значение поля "id" будет равно 1

<tt>SELECT * FROM `addressbook` WHERE `name` = 'Marina Larina'</tt> #Будут выбраны записи, в которых значение поля "name" будет равно 'Marina Larina'

<tt>SELECT * FROM `addressbook` ORDER BY `id` DESC</tt> #Будут выбраны все записи таблицы, но они будут расположены в обратном порядке.

<tt>SELECT * FROM `addressbook` LIMIT 0, 30</tt> #Будут выбраны только первые 30 элементов таблицы.

<tt>SELECT * FROM `addressbook` LIMIT 0, 30 ORDER BY `id` DESC</tt> #Будут выбраны только 30 элементов таблицы начиная с конца.
Собственно пока вам этого за глаза хватит.

Опа... При добавлении новой записи указали не то имя... что же теперь делать?
Все очень просто. Нужно воспользоваться выводом всех данных, узнать "id" номер записи и воспользоваться следующим запросом:
<tt>UPDATE `addressbook` SET `name` = 'Inna Larina' WHERE `id` = 1 LIMIT 1</tt>
Вот и хорошо. Обновлять записи мы научились.
Кстати заметьте, что мы обновили только необходимое нам поле, а остальные данные (телефон+адрес) остались прежними.

Ну а уж если и вовсе захотелось удалить определенную запись, то флаг вам в руки и вперед смотреть следующий запрос:
<tt>DELETE FROM `addressbook` WHERE `id` = 1 LIMIT 1</tt>

В результате запроса будет удалена вся строка (имя+адрес+телефон+id)!!!
Ну а уж если вы хотите ОЧИСТИТЬ всю таблицу от данных, тогда вперед...
<tt>TRUNCATE TABLE `addressbook`</tt>

Ну а если вы поняли что такая таблица вам и вовсе не нужна, то давайте сделаем следующее:
<tt>DROP TABLE `addressbook`</tt>

А если вам совсем все надоело, да и имя у базы вам никак не подходит :) то можно приступить и к уничтожению всей базы.
<tt>DROP DATABASE `база`</tt>

Вот собственно и все что я хотел вам рассказать в этой статье!
Я конечно понимаю, что это не все и, что еще много всего о чем я ни сказал. Но вопервых я писал статью для новичков, а во вторых по сути дела большее никого и не интересует, либо относится не этому контексту.
В следующей статье я затрону совсем другие вопросы, да и статья будет никак ни для новичков. Так что ждем-с.